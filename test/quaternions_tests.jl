# the multiplication table
table = [elI eli elj elk;
         eli -elI elk -elj;
         elj -elk -elI eli;
         elk elj -eli -elI]
for i in 1:4
    for j in 1:4
        basis1 = table[1:2, 2i - 1:2i]
        basis2 = table[1:2, 2j - 1:2j]
        @test isapprox(basis1 * basis2, table[2i - 1:2i, 2j - 1:2j])
    end
end


## The space of abstract inner products

u = Quaternion(rand(4))
v = Quaternion(rand(4))
v‚ÇÅ = Quaternion(rand(4))
v‚ÇÇ = Quaternion(rand(4))
z = Quaternion(0.0, 0.0, 0.0, 0.0)
Œ±, Œ≤ = rand(2)
@test isapprox(dot(u, v), dot(v, u)) # Symmetric
@test isapprox(dot(u, Œ± * v‚ÇÅ + Œ≤ * v‚ÇÇ), Œ± * dot(u, v‚ÇÅ) + Œ≤ * dot(u, v‚ÇÇ)) # Linear
@test dot(u, u) ‚â• 0 # Positive semidefinite I
@test isapprox(dot(z, z), 0) # positive semidefinite II


q = Quaternion(rand(4))
@test isapprox(conj(conj(q)), q)
@test isapprox(mat(conj(q)), elI .* q.a - eli .* q.b - elj .* q.c - elk .* q.d)
@test isapprox(det(q), q.a^2 + q.b^2 + q.c^2 + q.d^2)
h = q * conj(q)
@test isapprox(mat(h), elI .* (q.a^2 + q.b^2 + q.c^2 + q.d^2))

q = Quaternion(normalize(‚Ñù‚Å¥(rand(4))))
@test isapprox(norm(q), 1.0)
@test isapprox(norm(q), q.a^2 + q.b^2 + q.c^2 + q.d^2)


g = Quaternion(rand(4))
q = Quaternion(rand(4))
a = real(g)
v = imag(g)
a‚Ä≤ = real(q)
v‚Ä≤ = imag(q)
@test isapprox(g + q, Quaternion(a + a‚Ä≤, vec(v + v‚Ä≤)...))
@test isapprox(g * q, Quaternion(a * a‚Ä≤ - dot(v, v‚Ä≤), vec(a‚Ä≤ * v + a * v‚Ä≤ + cross(v, v‚Ä≤))...))


œà = 2œÄ
u = normalize(‚Ñù¬≥(rand(3)))
g = Quaternion(0.0, u)
q = Quaternion(œà, u)
@test isapprox(g, -q) # œà ‚Ü¶ œà + 2œÄ


e = Quaternion(‚Ñù‚Å¥(1.0, 0.0, 0.0, 0.0))
i = Quaternion(0.0, 1.0, 0.0, 0.0)
j = Quaternion(0.0, 0.0, 1.0, 0.0)
k = Quaternion(0.0, 0.0, 0.0, 1.0)

# i¬≤ = -1
@test isapprox(i * i, -e)
# j¬≤ = -1
@test isapprox(j * j, -e)
# k¬≤ = -1
@test isapprox(k * k, -e)
# ij = -ji
@test isapprox(i * j, -(j * i))
# (ij)¬≤ = -(ii)(jj)
@test isapprox((i * j) * (i * j), -((i * i) * (j * j)))

Œ∏ = rand() * 2œÄ
u = normalize(‚Ñù¬≥(rand(3)))
q = Quaternion(Œ∏, u)

conjugate = Quaternion(transpose(R) * mat4(q) * R)
@test isapprox(conj(q), conjugate)

# |q| = 1
@test isapprox(norm(q), 1)

# K‚ÇÅ = R·µÄJ‚ÇÉR
@test isapprox(K(1), transpose(R) * J(3) * R, atol = TOLERANCE)
# K‚ÇÇ = R·µÄJ‚ÇÅR
@test isapprox(K(2), transpose(R) * J(1) * R, atol = TOLERANCE)
# K‚ÇÉ = R·µÄJ‚ÇÇR
@test isapprox(K(3), transpose(R) * J(2) * R, atol = TOLERANCE)

# Check to see if the following vectors form a basis for ‚Ñù‚Å¥
Œæ = Quaternion(rand(4))

# <Œæ, Œæ> = 1
@test isapprox(norm(Œæ)^2, abs(dot(Œæ, Œæ)), atol = TOLERANCE)
# <Œæ, K‚ÇÅŒæ> = 0
@test isapprox(0, dot(Œæ, K(1) * Œæ), atol = TOLERANCE)
# <Œæ, K‚ÇÇŒæ> = 0
@test isapprox(0, dot(Œæ, K(2) * Œæ), atol = TOLERANCE)
# <Œæ, K‚ÇÉŒæ> = 0
@test isapprox(0, dot(Œæ, K(3) * Œæ), atol = TOLERANCE)

for i in 1:3
    for j = 1:3
        if i == j
            continue
        end
        # <K·µ¢Œæ, K‚±ºŒæ> = 0
        @test isapprox(0, dot(K(i) * Œæ, K(j) * Œæ), atol = TOLERANCE)
        # <Œæ, K·µ¢·µÄK‚±ºŒæ> = 0
        @test isapprox(0, dot(Œæ, transpose(K(i)) * K(j) * Œæ), atol = TOLERANCE)
        # <Œæ, -K·µ¢K‚±ºŒæ> = 0
        @test isapprox(0, dot(Œæ, -K(i) * K(j) * Œæ), atol = TOLERANCE)
        for k in 1:3
            if k == i || k == j
                continue
            end
            # œµ·µ¢‚±º‚Çñ is 1 for even permutations, ‚àí1 for odd permutations and 0 otherwise.
            œµ(i, j) = begin
                if i == 1
                    if j == 2
                        return 0
                    else
                        return -1
                    end
                end
                if i == 2
                    if j == 3
                        return -1
                    else
                        return 1
                    end
                end
                if i == 3
                    if j == 1
                        return -1
                    else
                        return 1
                    end
                end
            end
            # <Œæ, œµ·µ¢‚±º‚ÇñK‚ÇñŒæ> = 0
            @test isapprox(0, dot(Œæ, œµ(i, j) .* K(k) * Œæ), atol = TOLERANCE)
        end
    end
end


# vectorial quaternions
v = ùïç(0.0, rand(3)...)
q = Quaternion(v)
M = mat(q)
T, X, Y, Z = vec(v)
N = [im * Z im * X - Y; im * X + Y -im * Z]
@test isapprox(M, N)


# spin-vectors to quaternions
timesign = rand([1, -1])
Œ∂ = (2rand() - 1) * exp(im * rand() * 2œÄ)
v = SpinVector(Œ∂, timesign)
q = Quaternion(v)
@test isapprox(‚Ñù¬≥(v), imag(q))