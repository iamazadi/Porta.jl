import FileIO
import GLMakie
import LinearAlgebra
using Porta


figuresize = (4096, 2160)
segments = 360
frames_number = 360
modelname = "fig111crosssections"

M = I(4)
xÃÇ = ‚Ñù¬≥([1.0; 0.0; 0.0])
yÃÇ = ‚Ñù¬≥([0.0; 1.0; 0.0])
zÃÇ = ‚Ñù¬≥([0.0; 0.0; 1.0])
eyeposition = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
lookat = ‚Ñù¬≥(0.0, 0.0, 0.0)
up = normalize(‚Ñù¬≥(0.0, 0.0, 1.0))
totalstages = 1
mask = FileIO.load("data/basemap_mask.png")

makefigure() = GLMakie.Figure(size = figuresize)
fig = GLMakie.with_theme(makefigure, GLMakie.theme_black())
pl = GLMakie.PointLight(GLMakie.Point3f(0), GLMakie.RGBf(0.0862, 0.0862, 0.0862))
al = GLMakie.AmbientLight(GLMakie.RGBf(0.9, 0.9, 0.9))
lscene1 = GLMakie.LScene(fig[1, 1], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))
lscene2 = GLMakie.LScene(fig[1, 2], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))

T = 1.0
spherematrix = makesphere(M, T, segments = segments)
sphereobservable1 = buildsurface(lscene1, spherematrix, mask, transparency = true)
sphereobservable2 = buildsurface(lscene2, spherematrix, mask, transparency = true)
planematrix = makestereographicprojectionplane(M, T = T, segments = segments)
planeobservable1 = buildsurface(lscene1, planematrix, mask, transparency = true)
planeobservable2 = buildsurface(lscene2, planematrix, mask, transparency = true)
# transformingplaneobservable1 = buildsurface(lscene1, planematrix, mask, transparency = true)
# transformingplaneobservable2 = buildsurface(lscene2, planematrix, mask, transparency = true)

generate() = 2rand() - 1 + im * (2rand() - 1)
Œ∫ = SpinVector(generate(), generate(), Int(T))
œµ = 0.1
Œ∂ = Complex(Œ∫)
Œ∫ = SpinVector(Œ∂, Int(T))
Œ∂‚Ä≤ = Œ∂ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫.a[2]^2)
Œ∫‚Ä≤ = SpinVector(Œ∂‚Ä≤, Int(T))

Œ∂‚Ä≥ = Œ∂‚Ä≤ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫‚Ä≤.a[2]^2)
Œ∫‚Ä≥ = SpinVector(Œ∂‚Ä≥, Int(T))
Œ∫v = ùïç(Œ∫)
Œ∫‚Ä≤v = ùïç(Œ∫‚Ä≤)
Œ∫‚Ä≥v = ùïç(Œ∫‚Ä≥)

linewidth = 20
Œ∫linepoints = []
Œ∫linecolors = []
for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
    _Œ∫linepoints = GLMakie.Observable(GLMakie.Point3f[])
    _Œ∫linecolors = GLMakie.Observable(Int[])
    for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        Œ∫vector = LinearAlgebra.normalize(vec(scale1 * Œ∫v + scale2 * Œ∫‚Ä≤v))
        Œ∫point = GLMakie.Point3f(project(‚Ñç(Œ∫vector)))
        push!(_Œ∫linepoints[], Œ∫point)
        push!(_Œ∫linecolors[], i + j)
    end
    push!(Œ∫linepoints, _Œ∫linepoints)
    push!(Œ∫linecolors, _Œ∫linecolors)
    GLMakie.lines!(lscene1, Œ∫linepoints[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
    GLMakie.lines!(lscene2, Œ∫linepoints[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
end

arrowsize = GLMakie.Vec3f(0.06, 0.08, 0.1)
linewidth = 0.04
origin = GLMakie.Observable(GLMakie.Point3f(0.0, 0.0, 0.0))
northpole = GLMakie.Observable(GLMakie.Point3f(0.0, 0.0, 1.0))
Œ∫observable = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤observable = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥observable = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))
Œ∫projectionobservable = GLMakie.Observable(GLMakie.Point3f(projectontoplane(Œ∫v)))
Œ∫‚Ä≤projectionobservable = GLMakie.Observable(GLMakie.Point3f(projectontoplane(Œ∫‚Ä≤v)))
Œ∫‚Ä≥projectionobservable = GLMakie.Observable(GLMakie.Point3f(projectontoplane(Œ∫‚Ä≥v)))
ps = GLMakie.@lift([$origin, $Œ∫observable, $origin, $Œ∫projectionobservable,
                    $origin, $Œ∫‚Ä≤observable, $origin, $Œ∫‚Ä≤projectionobservable,
                    $origin, $Œ∫‚Ä≥observable, $origin, $Œ∫‚Ä≥projectionobservable])
ns = GLMakie.@lift([$Œ∫observable, LinearAlgebra.normalize($Œ∫‚Ä≤observable - $Œ∫observable), $Œ∫projectionobservable, LinearAlgebra.normalize($Œ∫‚Ä≤projectionobservable - $Œ∫projectionobservable),
                    $Œ∫‚Ä≤observable, LinearAlgebra.normalize($Œ∫‚Ä≥observable - $Œ∫‚Ä≤observable), $Œ∫‚Ä≤projectionobservable, LinearAlgebra.normalize($Œ∫‚Ä≥projectionobservable - $Œ∫‚Ä≤projectionobservable),
                    $Œ∫‚Ä≥observable, LinearAlgebra.normalize($Œ∫observable - $Œ∫‚Ä≥observable), $Œ∫‚Ä≥projectionobservable, LinearAlgebra.normalize($Œ∫projectionobservable - $Œ∫‚Ä≥projectionobservable)])
colorants = [:red, :green, :blue, :orange]
GLMakie.arrows!(lscene1,
    ps, ns, fxaa = true, # turn on anti-aliasing
    color = [colorants..., colorants..., colorants...],
    linewidth = linewidth, arrowsize = arrowsize,
    align = :origin
)
GLMakie.arrows!(lscene2,
    ps, ns, fxaa = true, # turn on anti-aliasing
    color = [colorants..., colorants..., colorants...],
    linewidth = linewidth, arrowsize = arrowsize,
    align = :origin
)

eyeposition_observable1 = lscene1.scene.camera.eyeposition
lookat_observable1 = lscene1.scene.camera.lookat
rotationaxis1 = GLMakie.@lift(normalize(‚Ñù¬≥(Float64.(vec($eyeposition_observable1 - $lookat_observable1))...)))
rotationangle1 = GLMakie.@lift(Float64(œÄ / 2 + atan(($eyeposition_observable1)[2], ($eyeposition_observable1)[1])))
rotation1 = GLMakie.@lift(GLMakie.Quaternion(‚Ñç($rotationangle1, $rotationaxis1) * ‚Ñç(getrotation(zÃÇ, $rotationaxis1)...)))
eyeposition_observable2 = lscene2.scene.camera.eyeposition
lookat_observable2 = lscene2.scene.camera.lookat
rotationaxis2 = GLMakie.@lift(normalize(‚Ñù¬≥(Float64.(vec($eyeposition_observable2 - $lookat_observable2))...)))
rotationangle2 = GLMakie.@lift(Float64(œÄ / 2 + atan(($eyeposition_observable2)[2], ($eyeposition_observable2)[1])))
rotation2 = GLMakie.@lift(GLMakie.Quaternion(‚Ñç($rotationangle2, $rotationaxis2) * ‚Ñç(getrotation(zÃÇ, $rotationaxis2)...)))
titles = ["O", "N", "P", "P‚Ä≤", "P‚Ä≥", "P", "P‚Ä≤", "P‚Ä≥"]
GLMakie.text!(lscene1,
    GLMakie.@lift(map(x -> GLMakie.Point3f(isnan(x) ? zÃÇ : x), [$origin, $northpole, $Œ∫observable, $Œ∫‚Ä≤observable, $Œ∫‚Ä≥observable, $Œ∫projectionobservable, $Œ∫‚Ä≤projectionobservable, $Œ∫‚Ä≥projectionobservable])),
    text = titles,
    color = [:gold, :black, colorants[1], colorants[1], colorants[1], colorants[3], colorants[3], colorants[3]],
    rotation = rotation1,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)
GLMakie.text!(lscene2,
    GLMakie.@lift(map(x -> GLMakie.Point3f(isnan(x) ? zÃÇ : x), [$origin, $northpole, $Œ∫observable, $Œ∫‚Ä≤observable, $Œ∫‚Ä≥observable, $Œ∫projectionobservable, $Œ∫‚Ä≤projectionobservable, $Œ∫‚Ä≥projectionobservable])),
    text = titles,
    color = [:gold, :black, colorants[1], colorants[1], colorants[1], colorants[3], colorants[3], colorants[3]],
    rotation = rotation2,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)

Œ∏ = rand()
œï = rand()
œà = rand()
transformation = SpinTransformation(Œ∏, œï, œà)
Œ∫flagplanematrix = makeflagplane(Œ∫v, Œ∫‚Ä≤v - Œ∫v, segments = segments)
Œ∫flagplanecolor = GLMakie.Observable(fill(GLMakie.RGBAf(0.5, 0.5, 0.5, 0.5), segments, segments))
Œ∫flagplaneobservable1 = buildsurface(lscene1, Œ∫flagplanematrix, Œ∫flagplanecolor, transparency = false)
Œ∫flagplaneobservable2 = buildsurface(lscene2, Œ∫flagplanematrix, Œ∫flagplanecolor, transparency = false)

Œ∫sectional = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤sectional = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥sectional = GLMakie.Observable(GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))

# balls
GLMakie.meshscatter!(lscene1, northpole, markersize = 0.05, color = :black)
GLMakie.meshscatter!(lscene1, origin, markersize = 0.05, color = :gold)
GLMakie.meshscatter!(lscene1, Œ∫observable, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene1, Œ∫‚Ä≤observable, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene1, Œ∫‚Ä≥observable, markersize = 0.05, color = colorants[3])
GLMakie.meshscatter!(lscene1, Œ∫projectionobservable, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene1, Œ∫‚Ä≤projectionobservable, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene1, Œ∫‚Ä≥projectionobservable, markersize = 0.05, color = colorants[3])
GLMakie.meshscatter!(lscene2, northpole, markersize = 0.05, color = :black)
GLMakie.meshscatter!(lscene2, origin, markersize = 0.05, color = :gold)
GLMakie.meshscatter!(lscene2, Œ∫observable, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≤observable, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≥observable, markersize = 0.05, color = colorants[3])
GLMakie.meshscatter!(lscene2, Œ∫projectionobservable, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≤projectionobservable, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≥projectionobservable, markersize = 0.05, color = colorants[3])
GLMakie.meshscatter!(lscene2, Œ∫projectionobservable, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≤projectionobservable, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≥projectionobservable, markersize = 0.05, color = colorants[3])
GLMakie.meshscatter!(lscene2, Œ∫sectional, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≤sectional, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene2, Œ∫‚Ä≥sectional, markersize = 0.05, color = colorants[3])

segmentP = GLMakie.@lift([$northpole, $Œ∫observable, $Œ∫projectionobservable])
segmentP‚Ä≤ = GLMakie.@lift([$northpole, $Œ∫‚Ä≤observable, $Œ∫‚Ä≤projectionobservable])
segmentP‚Ä≥ = GLMakie.@lift([$northpole, $Œ∫‚Ä≥observable, $Œ∫‚Ä≥projectionobservable])
segmentcolors = GLMakie.Observable(collect(1:segments))
linewidth = 8.0
GLMakie.lines!(lscene1, segmentP, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)
GLMakie.lines!(lscene1, segmentP‚Ä≤, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)
GLMakie.lines!(lscene1, segmentP‚Ä≥, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)
GLMakie.lines!(lscene2, segmentP, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)
GLMakie.lines!(lscene2, segmentP‚Ä≤, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)
GLMakie.lines!(lscene2, segmentP‚Ä≥, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)


animate(frame::Int) = begin
    progress = Float64(frame / frames_number)
    stage = min(totalstages - 1, Int(floor(totalstages * progress))) + 1
    stageprogress = totalstages * (progress - (stage - 1) * 1.0 / totalstages)
    println("Frame: $frame, Stage: $stage, Total Stages: $totalstages, Progress: $stageprogress")
    Œ∏ = sin(progress * 2œÄ)
    œï = progress * 2œÄ
    œà = cos(progress * 2œÄ)
    spintransform = SpinTransformation(Œ∏, œï, œà)
    spherematrix = makesphere(spintransform, T, segments = segments)
    planematrix = makestereographicprojectionplane(spintransform, T = 1.0, segments = segments)
    updatesurface!(spherematrix, sphereobservable1)
    updatesurface!(planematrix, planeobservable1)
    updatesurface!(spherematrix, sphereobservable2)
    updatesurface!(planematrix, planeobservable2)
    Œ∫transformed = ùïç(spintransform * Œ∫)
    Œ∫‚Ä≤transformed = ùïç(spintransform * Œ∫‚Ä≤)
    Œ∫‚Ä≥transformed = ùïç(spintransform * Œ∫‚Ä≥)
    Œ∫flagplanematrix = makeflagplane(Œ∫transformed, ùïç(LinearAlgebra.normalize(vec(Œ∫‚Ä≤transformed - Œ∫transformed))), segments = segments)
    updatesurface!(Œ∫flagplanematrix, Œ∫flagplaneobservable1)
    updatesurface!(Œ∫flagplanematrix, Œ∫flagplaneobservable2)
    Œ∫flagplanecolor[] = [GLMakie.RGBAf(convert_hsvtorgb([360.0 * progress; 1.0; 1.0])..., 1.0) for i in 1:segments, j in 1:segments]
    Œ∫observable[] = GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫transformed)))))
    Œ∫‚Ä≤observable[] = GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤transformed)))))
    Œ∫‚Ä≥observable[] = GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥transformed)))))
    Œ∫projectionobservable[] = GLMakie.Point3f(projectontoplane(Œ∫transformed))
    Œ∫‚Ä≤projectionobservable[] = GLMakie.Point3f(projectontoplane(Œ∫‚Ä≤transformed))
    Œ∫‚Ä≥projectionobservable[] = GLMakie.Point3f(projectontoplane(Œ∫‚Ä≥transformed))
    Œ∫sectional[] = (Œ∫observable[] + Œ∫projectionobservable[]) * 0.5
    Œ∫‚Ä≤sectional[] = (Œ∫‚Ä≤observable[] + Œ∫‚Ä≤projectionobservable[]) * 0.5
    Œ∫‚Ä≥sectional[] = (Œ∫‚Ä≥observable[] + Œ∫‚Ä≥projectionobservable[]) * 0.5
    for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        _Œ∫linepoints = GLMakie.Point3f[]
        _Œ∫linecolors = Int[]
        for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
            Œ∫vector = normalize(‚Ñç(vec(scale1 * Œ∫transformed + scale2 * ùïç(LinearAlgebra.normalize(vec(Œ∫‚Ä≤transformed - Œ∫transformed))))))
            Œ∫point = GLMakie.Point3f(project(Œ∫vector))
            push!(_Œ∫linepoints, Œ∫point)
            push!(_Œ∫linecolors, i + j)
        end
        Œ∫linepoints[i][] = _Œ∫linepoints
        Œ∫linecolors[i][] = _Œ∫linecolors
        GLMakie.notify(Œ∫linepoints[i])
        GLMakie.notify(Œ∫linecolors[i])
    end
    global lookat = (1.0 / 3.0) * (‚Ñù¬≥(Œ∫observable[]) + ‚Ñù¬≥(Œ∫‚Ä≤observable[]) + ‚Ñù¬≥(Œ∫‚Ä≥observable[]))
    global eyeposition = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
    updatecamera(lscene1, eyeposition, lookat, up)
    global lookat = (1.0 / 3.0) * (‚Ñù¬≥(Œ∫projectionobservable[]) + ‚Ñù¬≥(Œ∫‚Ä≤projectionobservable[]) + ‚Ñù¬≥(Œ∫‚Ä≥projectionobservable[]))
    global eyeposition = normalize(‚Ñù¬≥(0.0, 0.0, 1.0)) * float(œÄ)
    updatecamera(lscene2, eyeposition, lookat, up)
end


animate(1)


GLMakie.record(fig, joinpath("gallery", "$modelname.mp4"), 1:frames_number) do frame
    animate(frame)
end

# GLMakie.save(joinpath("gallery", "$(modelname)01.png"), fig)