using FileIO
using GLMakie
using LinearAlgebra
using Porta


figuresize = (4096, 2160)
segments = 360
frames_number = 360
modelname = "fig116uniqueframe"

M = Identity(4)
xÃÇ = ‚Ñù¬≥([1.0; 0.0; 0.0])
yÃÇ = ‚Ñù¬≥([0.0; 1.0; 0.0])
zÃÇ = ‚Ñù¬≥([0.0; 0.0; 1.0])
eyeposition = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
lookat = ‚Ñù¬≥(0.0, 0.0, 0.0)
up = normalize(‚Ñù¬≥(0.0, 0.0, 1.0))
T = 1.0
œµ = 1e-2
linewidth = 20
arrowsize = Vec3f(0.06, 0.08, 0.1)
arrowlinewidth = 0.04
mask = load("data/basemap_mask.png")

generate() = 2rand() - 1 + im * (2rand() - 1)
Œ∫ = SpinVector(generate(), generate(), Int(T))
Œ∂ = Complex(Œ∫)
Œ∫ = SpinVector(Œ∂, Int(T))
Œ∫antipode = SpinVector(-1.0 / conj(Œ∂), Int(T))
Œ∂‚Ä≤ = Œ∂ - (1.0 / ‚àö2) * 10œµ * (1.0 / Œ∫.a[2]^2)
Œ∫‚Ä≤ = SpinVector(Œ∂‚Ä≤, Int(T))
Œ∫v = ùïç( Œ∫)
Œ∫‚Ä≤v = ùïç( Œ∫‚Ä≤)
Œ∫vantipode = ùïç( Œ∫antipode)

makefigure() = Figure(size = figuresize)
fig = with_theme(makefigure, theme_black())
pl = PointLight(Point3f(0), RGBf(0.0862, 0.0862, 0.0862))
al = AmbientLight(RGBf(0.9, 0.9, 0.9))
lscene = LScene(fig[1, 1], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))

spherematrix = makesphere(M, T, compressedprojection = true, segments = segments)
sphereobservable = buildsurface(lscene, spherematrix, mask, transparency = true)

origin = Observable(Point3f(0.0, 0.0, 0.0))
Œ∫observable = Observable(Point3f(project(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤observable = Observable(Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫vobservable = Observable(Œ∫v)
Œ∫‚Ä≤vobservable = Observable(Œ∫‚Ä≤v)
A = Observable(‚Ñù‚Å¥(1.0, 0.0, 0.0, 0.0))
B = Observable(‚Ñù‚Å¥(0.0, 1.0, 0.0, 0.0))
C = Observable(‚Ñù‚Å¥(0.0, 0.0, 1.0, 0.0))
D = Observable(‚Ñù‚Å¥(0.0, 0.0, 0.0, 1.0))
Ahead = @lift(Point3f(normalize(project(‚Ñç($A)))))
Bhead = @lift(Point3f(normalize(project(‚Ñç($B)))))
Chead = @lift(Point3f(normalize(project(‚Ñç($C)))))
Dhead = @lift(Point3f(normalize(project(‚Ñç($D)))))
ps = @lift([$origin, $Œ∫observable, $Œ∫observable, $Œ∫observable, $Œ∫observable, $Œ∫observable])
ns = @lift([$Œ∫observable, normalize($Œ∫‚Ä≤observable - $Œ∫observable), $Ahead, $Bhead, $Chead, $Dhead])
colorants = [:black, :gray, :red, :green, :blue, :orange]
arrows!(lscene,
    ps, ns, fxaa = true, # turn on anti-aliasing
    color = colorants,
    linewidth = arrowlinewidth, arrowsize = arrowsize,
    align = :origin
)

rotation = gettextrotation(lscene)
titles = ["O", "P", "P‚Ä≤", "A", "B", "C", "D"]
text!(lscene,
    @lift(map(x -> Point3f(isnan(x) ? zÃÇ : x), [$origin, $Œ∫observable, $Œ∫‚Ä≤observable, $Œ∫observable + $Ahead, $Œ∫observable + $Bhead, $Œ∫observable + $Chead, $Œ∫observable + $Dhead])),
    text = titles,
    color = [:black, colorants...],
    rotation = rotation,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)

Œ∫flagplanematrix = @lift(makeflagplane($Œ∫vobservable, $Œ∫‚Ä≤vobservable - $Œ∫vobservable, T, compressedprojection = true, segments = segments))
Œ∫flagplanecolor = Observable(fill(RGBAf(0.5, 0.5, 0.5, 0.8), segments, segments))
Œ∫flagplaneobservable = buildsurface(lscene, Œ∫flagplanematrix, Œ∫flagplanecolor, transparency = true)

# balls
meshscatter!(lscene, origin, markersize = 0.05, color = :black)
meshscatter!(lscene, Œ∫observable, markersize = 0.05, color = colorants[1])
meshscatter!(lscene, Œ∫‚Ä≤observable, markersize = 0.05, color = colorants[2])


animate(frame::Int) = begin
    progress = Float64(frame / frames_number)
    println("Frame: $frame, Progress: $progress")
    Œ∏‚ÇÅ = sin(progress * 2œÄ) * float(œÄ)
    a = ‚Ñç(exp(K(1) * Œ∏‚ÇÅ))
    Œ∏‚ÇÇ = cos(progress * 2œÄ) * float(œÄ)
    b = ‚Ñç(exp(K(2) * Œ∏‚ÇÇ))

    _Œ∫v = a * ‚Ñç(vec(Œ∫v)) * b
    _Œ∫vantipode = a * ‚Ñç(vec(Œ∫vantipode)) * b
    _Œ∫‚Ä≤v = a * ‚Ñç(vec(Œ∫‚Ä≤v)) * b
    Œ∫vobservable[] = ùïç( vec(_Œ∫v))
    Œ∫‚Ä≤vobservable[] = ùïç( vec(_Œ∫‚Ä≤v))
    Œ∫observable[] = Point3f(project(normalize(_Œ∫v)))
    Œ∫‚Ä≤observable[] = Point3f(project(normalize(_Œ∫‚Ä≤v)))

    A[] = ‚Ñù‚Å¥(vec(normalize(_Œ∫v + _Œ∫vantipode)))
    v = normalize(‚Ñù‚Å¥(vec(_Œ∫v)))
    B[] = normalize(v - dot(v, A[]) * A[])
    v = ‚Ñù‚Å¥(vec(normalize(_Œ∫‚Ä≤v - _Œ∫v)))
    C[] = normalize(v - dot(v, A[]) * A[])
    v = normalize(‚Ñù‚Å¥(1.0, 1.0, 1.0, 1.0))
    D[] = normalize(v - dot(v, A[]) * A[] - dot(v, B[]) * B[] - dot(v, C[]) * C[])

    Œ∫flagplanecolor[] = [RGBAf(convert_hsvtorgb([359.0 * progress; 1.0; 1.0])..., 0.8) for i in 1:segments, j in 1:segments]

    spherematrix = makesphere(a, b, T, compressedprojection = true, segments = segments)
    updatesurface!(spherematrix, sphereobservable)

    ratio = frame == 1 ? 0.0 : 0.95
    global up = ratio * up + (1.0 - ratio) * ‚Ñù¬≥(Ahead[])
    global lookat = ratio * lookat + (1.0 - ratio) * (1.0 / 4.0) * ‚Ñù¬≥(Ahead[] + Bhead[] + Chead[])
    global eyeposition = ratio * eyeposition + (1.0 - ratio) * normalize(lookat) * float(œÄ)
    updatecamera!(lscene, eyeposition, lookat, up)
end


animate(1)

record(fig, joinpath("gallery", "$modelname.mp4"), 1:frames_number) do frame
    animate(frame)
end