using FileIO
using GLMakie
using LinearAlgebra
using Porta


figuresize = (4096, 2160)
segments = 360
frames_number = 360
modelname = "fig115nullflagbundle"

M = Identity(4)
xÃÇ = ‚Ñù¬≥([1.0; 0.0; 0.0])
yÃÇ = ‚Ñù¬≥([0.0; 1.0; 0.0])
zÃÇ = ‚Ñù¬≥([0.0; 0.0; 1.0])
eyeposition = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
lookat = ‚Ñù¬≥(0.0, 0.0, 0.0)
up = normalize(‚Ñù¬≥(0.0, 0.0, 1.0))
gauge1 = 0.0
gauge2 = float(œÄ / 2)
gauge3 = float(2œÄ)
chart = (-œÄ / 2, œÄ / 2, -œÄ / 2, œÄ / 2)
indices = Dict()
T, X, Y, Z = vec(normalize(‚Ñù‚Å¥(1.0, 0.0, 1.0, 0.0)))
u = ùïç(T, X, Y, Z)
q = ‚Ñç(T, X, Y, Z)
tolerance = 1e-3
@assert(isnull(u, atol = tolerance), "u in not a null vector, $u.")
@assert(isapprox(norm(q), 1, atol = tolerance), "q in not a unit quaternion, $(norm(q)).")
T = 1.0
œµ = 0.1
transformation = SpinTransformation(rand() * œµ, rand() * œµ, rand() * œµ)
reference = load("data/basemap_color.png")
mask = load("data/basemap_mask.png")

generate() = 2rand() - 1 + im * (2rand() - 1)
Œ∫ = SpinVector(generate(), generate(), Int(T))
Œ∂ = Complex(Œ∫)
Œ∫ = SpinVector(Œ∂, Int(T))
Œ∂‚Ä≤ = Œ∂ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫.a[2]^2)
Œ∫‚Ä≤ = SpinVector(Œ∂‚Ä≤, Int(T))

Œ∂‚Ä≥ = Œ∂‚Ä≤ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫‚Ä≤.a[2]^2)
Œ∫‚Ä≥ = transformation * SpinVector(Œ∂‚Ä≥, Int(T))
Œ∫v = ùïç(Œ∫)
Œ∫‚Ä≤v = ùïç(Œ∫‚Ä≤)
Œ∫‚Ä≥v = ùïç(Œ∫‚Ä≥)

makefigure() = Figure(size = figuresize)
fig = with_theme(makefigure, theme_black())
pl = PointLight(Point3f(0), RGBf(0.0862, 0.0862, 0.0862))
al = AmbientLight(RGBf(0.9, 0.9, 0.9))
lscene = LScene(fig[1, 1], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))

## Load the Natural Earth data
attributespath = "data/naturalearth/geometry-attributes.csv"
nodespath = "data/naturalearth/geometry-nodes.csv"
countries = loadcountries(attributespath, nodespath)
boundary_names = Set()
while length(boundary_names) < 10
    push!(boundary_names, rand(countries["name"]))
end
boundary_nodes = Vector{Vector{‚Ñù¬≥}}()
for i in eachindex(countries["name"])
    for name in boundary_names
        if countries["name"][i] == name
            push!(boundary_nodes, countries["nodes"][i])
            println(name)
            indices[name] = length(boundary_nodes)
        end
    end
end

points = Vector{‚Ñç}[]
for i in eachindex(boundary_nodes)
    _points = ‚Ñç[]
    for node in boundary_nodes[i]
        r, Œ∏, œï = convert_to_geographic(node)
        push!(_points, q * ‚Ñç(exp(œï / 2 * K(1) + Œ∏ * K(2))))
    end
    push!(points, _points)
end

basemap1 = Basemap(lscene, q, gauge1, M, chart, segments, mask, transparency = true)
basemap2 = Basemap(lscene, q, gauge2, M, chart, segments, mask, transparency = true)

whirls1 = []
whirls2 = []
for i in eachindex(boundary_nodes)
    color1 = getcolor(boundary_nodes[i], reference, 0.5)
    color2 = getcolor(boundary_nodes[i], reference, 0.25)
    whirl1 = Whirl(lscene, points[i], gauge1, gauge2, M, segments, color1, transparency = true)
    whirl2 = Whirl(lscene, points[i], gauge2, gauge3, M, segments, color2, transparency = true)
    push!(whirls1, whirl1)
    push!(whirls2, whirl2)
end

linewidth = 20
Œ∫linepoints = []
Œ∫linecolors = []
for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
    _Œ∫linepoints = Observable(Point3f[])
    _Œ∫linecolors = Observable(Int[])
    for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        Œ∫vector = normalize(vec(scale1 * Œ∫v + scale2 * Œ∫‚Ä≤v))
        Œ∫point = Point3f(projectnocompression(‚Ñç(Œ∫vector)))
        push!(_Œ∫linepoints[], Œ∫point)
        push!(_Œ∫linecolors[], i + j)
    end
    push!(Œ∫linepoints, _Œ∫linepoints)
    push!(Œ∫linecolors, _Œ∫linecolors)
    lines!(lscene, Œ∫linepoints[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
end

arrowsize = Vec3f(0.06, 0.08, 0.1)
arrowlinewidth = 0.04
origin = Observable(Point3f(0.0, 0.0, 0.0))
northpole = Observable(Point3f(0.0, 0.0, 1.0))
Œ∫observable = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤observable = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥observable = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))
ps = @lift([$origin, $Œ∫observable,
            $origin, $Œ∫‚Ä≤observable,
            $origin, $Œ∫‚Ä≥observable])
ns = @lift([$Œ∫observable, normalize($Œ∫‚Ä≤observable - $Œ∫observable),
            $Œ∫‚Ä≤observable, normalize($Œ∫‚Ä≥observable - $Œ∫‚Ä≤observable),
            $Œ∫‚Ä≥observable, normalize($Œ∫observable - $Œ∫‚Ä≥observable)])
colorants = [:red, :green, :blue, :black]
arrows!(lscene,
    ps, ns, fxaa = true, # turn on anti-aliasing
    color = [colorants[1], colorants[1], colorants[2], colorants[2], colorants[3], colorants[3]],
    linewidth = arrowlinewidth, arrowsize = arrowsize,
    align = :origin
)

rotation = gettextrotation(lscene)
titles = ["O", "N", "P", "P‚Ä≤", "P‚Ä≥"]
text!(lscene,
    @lift(map(x -> Point3f(isnan(x) ? zÃÇ : x), [$origin, $northpole, $Œ∫observable, $Œ∫‚Ä≤observable, $Œ∫‚Ä≥observable])),
    text = titles,
    color = [:gold, :black, colorants[1], colorants[2], colorants[3]],
    rotation = rotation,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)

Œ∫flagplanematrix = makeflagplane(Œ∫v, Œ∫‚Ä≤v - Œ∫v, T, compressedprojection = true, segments = segments)
Œ∫flagplanecolor = Observable(fill(RGBAf(0.5, 0.5, 0.5, 0.5), segments, segments))
Œ∫flagplaneobservable = buildsurface(lscene, Œ∫flagplanematrix, Œ∫flagplanecolor, transparency = true)

# balls
meshscatter!(lscene, northpole, markersize = 0.05, color = :black)
meshscatter!(lscene, origin, markersize = 0.05, color = :gold)
meshscatter!(lscene, Œ∫observable, markersize = 0.05, color = colorants[1])
meshscatter!(lscene, Œ∫‚Ä≤observable, markersize = 0.05, color = colorants[2])
meshscatter!(lscene, Œ∫‚Ä≥observable, markersize = 0.05, color = colorants[3])

segmentP = @lift([$northpole, $Œ∫observable])
segmentP‚Ä≤ = @lift([$northpole, $Œ∫‚Ä≤observable])
segmentP‚Ä≥ = @lift([$northpole, $Œ∫‚Ä≥observable])
segmentcolors = collect(1:2)
linewidth = 8.0
lines!(lscene, segmentP, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 2), transparency = false)
lines!(lscene, segmentP‚Ä≤, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 2), transparency = false)
lines!(lscene, segmentP‚Ä≥, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 2), transparency = false)

trajectorycolor = Observable(Int[])
Œ∫trajectory = Observable(Point3f[])
Œ∫‚Ä≤trajectory = Observable(Point3f[])
Œ∫‚Ä≥trajectory = Observable(Point3f[])
lines!(lscene, Œ∫trajectory, linewidth = linewidth, color = trajectorycolor, colormap = :darkrainbow, colorrange = (1, frames_number), transparency = true)
lines!(lscene, Œ∫‚Ä≤trajectory, linewidth = linewidth, color = trajectorycolor, colormap = :darkrainbow, colorrange = (1, frames_number), transparency = true)
lines!(lscene, Œ∫‚Ä≥trajectory, linewidth = linewidth, color = trajectorycolor, colormap = :darkrainbow, colorrange = (1, frames_number), transparency = true)


animate(frame::Int) = begin
    progress = Float64(frame / frames_number)
    println("Frame: $frame, Progress: $progress")
    global gauge2 = progress * 2œÄ
    update!(basemap2, q, gauge2, M)
    for i in eachindex(whirls1)
        update!(whirls1[i], points[i], gauge1, gauge2, M)
        update!(whirls2[i], points[i], gauge2, gauge3, M)
    end
    r, Œ∏, œï = convert_to_geographic(‚Ñù¬≥(Œ∫))
    Œ∫transformed = ùïç( vec(M * q * ‚Ñç(exp(œï / 2 * K(1) + Œ∏ * K(2)) * exp(gauge2 * K(3)))))
    r, Œ∏, œï = convert_to_geographic(‚Ñù¬≥(Œ∫‚Ä≤))
    Œ∫‚Ä≤transformed = ùïç( vec(M * q * ‚Ñç(exp(œï / 2 * K(1) + Œ∏ * K(2)) * exp(gauge2 * K(3)))))
    r, Œ∏, œï = convert_to_geographic(‚Ñù¬≥(Œ∫‚Ä≥))
    Œ∫‚Ä≥transformed = ùïç( vec(M * q * ‚Ñç(exp(œï / 2 * K(1) + Œ∏ * K(2)) * exp(gauge2 * K(3)))))
    northpole[] = Point3f(project(M * q * ‚Ñç(exp((float(0.0) / 2) * K(1) + float(œÄ / 2) * K(2)) * exp(gauge2 * K(3)))))
    Œ∫flagplanematrix = makeflagplane(Œ∫transformed, ùïç( normalize(vec(Œ∫‚Ä≤transformed - Œ∫transformed))), T, compressedprojection = true, segments = segments)
    updatesurface!(Œ∫flagplanematrix, Œ∫flagplaneobservable)
    Œ∫flagplanecolor[] = [RGBAf(convert_hsvtorgb([359.0 * progress; 1.0; 1.0])..., 0.9) for i in 1:segments, j in 1:segments]
    Œ∫observable[] = Point3f(project(normalize(‚Ñç(vec(Œ∫transformed)))))
    Œ∫‚Ä≤observable[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤transformed)))))
    Œ∫‚Ä≥observable[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥transformed)))))
    push!(trajectorycolor[], frame)
    push!(Œ∫trajectory[], Œ∫observable[])
    push!(Œ∫‚Ä≤trajectory[], Œ∫‚Ä≤observable[])
    push!(Œ∫‚Ä≥trajectory[], Œ∫‚Ä≥observable[])
    notify(trajectorycolor)
    notify(Œ∫trajectory)
    notify(Œ∫‚Ä≤trajectory)
    notify(Œ∫‚Ä≥trajectory)
    if (frame % 10) == 0
        arrows!(lscene,
                [Œ∫observable[], Œ∫‚Ä≤observable[], Œ∫‚Ä≥observable[]],
                0.5 .* normalize.([Œ∫‚Ä≤observable[] - Œ∫observable[], Œ∫‚Ä≥observable[] - Œ∫‚Ä≤observable[], Œ∫observable[] - Œ∫‚Ä≥observable[]]),
                fxaa = true, # turn on anti-aliasing
                color = [colorants[1], colorants[2], colorants[3]],
                linewidth = arrowlinewidth * 0.5, arrowsize = arrowsize .* 0.5,
                align = :origin)
    end
    for (i, scale1) in enumerate(collect(range(0.0, stop = T, length = segments)))
        _Œ∫linepoints = Point3f[]
        _Œ∫linecolors = Int[]
        for (j, scale2) in enumerate(collect(range(0.0, stop = T, length = segments)))
            Œ∫vector = normalize(‚Ñç(vec(scale1 * Œ∫transformed + scale2 * ùïç( normalize(vec(Œ∫‚Ä≤transformed - Œ∫transformed))))))
            Œ∫point = Point3f(project(Œ∫vector))
            push!(_Œ∫linepoints, Œ∫point)
            push!(_Œ∫linecolors, i + j)
        end
        Œ∫linepoints[i][] = _Œ∫linepoints
        Œ∫linecolors[i][] = _Œ∫linecolors
        notify(Œ∫linepoints[i])
        notify(Œ∫linecolors[i])
    end
    global up = ‚Ñù¬≥(Œ∫observable[] - Œ∫‚Ä≥observable[])
    global lookat = (1.0 / 3.0) * ‚Ñù¬≥(Œ∫observable[] + Œ∫‚Ä≤observable[] + Œ∫‚Ä≥observable[])
    global eyeposition = normalize(lookat + ‚Ñù¬≥(northpole[]) + cross(‚Ñù¬≥(Œ∫observable[]), ‚Ñù¬≥(Œ∫‚Ä≥observable[]))) * float(œÄ)
    updatecamera!(lscene, eyeposition, lookat, up)
end


animate(1)

record(fig, joinpath("gallery", "$modelname.mp4"), 1:frames_number) do frame
    animate(frame)
end