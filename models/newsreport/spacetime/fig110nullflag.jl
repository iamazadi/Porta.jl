import FileIO
import GLMakie
import LinearAlgebra
using Porta


figuresize = (4096, 2160)
segments = 360
frames_number = 360
modelname = "fig110nullflag"

M = I(4)
xÃÇ = ‚Ñù¬≥([1.0; 0.0; 0.0])
yÃÇ = ‚Ñù¬≥([0.0; 1.0; 0.0])
zÃÇ = ‚Ñù¬≥([0.0; 0.0; 1.0])
eyeposition = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
lookat = ‚Ñù¬≥(0.0, 0.0, 0.0)
up = normalize(‚Ñù¬≥(0.0, 0.0, 1.0))
totalstages = 1
mask = FileIO.load("data/basemap_mask.png")

makefigure() = GLMakie.Figure(size = figuresize)
fig = GLMakie.with_theme(makefigure, GLMakie.theme_black())
pl = GLMakie.PointLight(GLMakie.Point3f(0), GLMakie.RGBf(0.0862, 0.0862, 0.0862))
al = GLMakie.AmbientLight(GLMakie.RGBf(0.9, 0.9, 0.9))
lscene = GLMakie.LScene(fig[1, 1], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))

T = 1.0
spherematrix = makesphere(M, T, segments = segments)
sphereobservable = buildsurface(lscene, spherematrix, mask, transparency = true)
planematrix = makestereographicprojectionplane(M, T = T, segments = segments)
planeobservable = buildsurface(lscene, planematrix, mask, transparency = true)

generate() = 2rand() - 1 + im * (2rand() - 1)
Œ∫ = SpinVector(generate(), generate(), Int(T))
œµ = 0.1
Œ∂ = Complex(Œ∫)
Œ∂‚Ä≤ = Œ∂ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫.a[2]^2)
Œ∫ = SpinVector(Œ∂, Int(T))
Œ∫‚Ä≤ = SpinVector(Œ∂‚Ä≤, Int(T))
Œ∫v = ùïç(Œ∫)
Œ∫‚Ä≤v = ùïç(Œ∫‚Ä≤)

arrowsize = GLMakie.Vec3f(0.06, 0.08, 0.1)
linewidth = 0.04
origin = GLMakie.Observable(GLMakie.Point3f(0.0, 0.0, 0.0))
northpole = GLMakie.Observable(GLMakie.Point3f(0.0, 0.0, 1.0))
Œ∫tail = GLMakie.Observable(GLMakie.Point3f(vec(project(normalize(‚Ñç(vec(Œ∫‚Ä≤v)))))...))
Œ∫head = GLMakie.Observable(GLMakie.Point3f(vec(project(normalize(‚Ñç(vec(Œ∫v)))))...))
Œ∫tail1 = GLMakie.Observable(GLMakie.Point3f(projectontoplane(Œ∫‚Ä≤v)))
Œ∫head1 = GLMakie.Observable(GLMakie.Point3f(projectontoplane(Œ∫v)))
ps = GLMakie.@lift([$origin, $Œ∫head, $origin, $Œ∫head1])
ns = GLMakie.@lift([$Œ∫head, LinearAlgebra.normalize($Œ∫tail - $Œ∫head), $Œ∫head1, LinearAlgebra.normalize($Œ∫tail1 - $Œ∫head1)])
colorants = [:red, :green]
GLMakie.arrows!(lscene,
    ps, ns, fxaa = true, # turn on anti-aliasing
    color = [colorants..., colorants...],
    linewidth = linewidth, arrowsize = arrowsize,
    align = :origin
)

linewidth = 20
Œ∫linepoints = []
Œ∫lines = []
Œ∫linecolors = []
for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
    _Œ∫linepoints = GLMakie.Observable(GLMakie.Point3f[])
    _Œ∫linecolors = GLMakie.Observable(Int[])
    for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        Œ∫vector = LinearAlgebra.normalize(vec(scale1 * Œ∫v + scale2 * Œ∫‚Ä≤v))
        Œ∫point = GLMakie.Point3f(project(‚Ñç(Œ∫vector)))
        push!(_Œ∫linepoints[], Œ∫point)
        push!(_Œ∫linecolors[], i + j)
    end
    push!(Œ∫linepoints, _Œ∫linepoints)
    push!(Œ∫linecolors, _Œ∫linecolors)
    Œ∫line = GLMakie.lines!(lscene, Œ∫linepoints[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
    push!(Œ∫lines, Œ∫line)
end

eyeposition_observable = lscene.scene.camera.eyeposition
lookat_observable = lscene.scene.camera.lookat
rotationaxis = GLMakie.@lift(normalize(‚Ñù¬≥(Float64.([vec($eyeposition_observable)...] - [vec($lookat_observable)...])...)))
rotationangle = GLMakie.@lift(Float64(œÄ / 2 + atan(($eyeposition_observable)[2], ($eyeposition_observable)[1])))
rotation = GLMakie.@lift(GLMakie.Quaternion(‚Ñç($rotationangle, $rotationaxis) * ‚Ñç(getrotation(zÃÇ, $rotationaxis)...)))
titles = ["O", "N", "P", "P‚Ä≤", "P", "P‚Ä≤"]
GLMakie.text!(lscene,
    GLMakie.@lift(map(x -> GLMakie.Point3f(vec((isnan(x) ? zÃÇ : x))), [$origin, $northpole, $Œ∫head, $Œ∫tail, $Œ∫head1, $Œ∫tail1])),
    text = titles,
    color = [:gold, :black, colorants..., colorants...],
    rotation = rotation,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)

Œ∏ = rand()
œï = rand()
œà = rand()
transformation = SpinTransformation(Œ∏, œï, œà)
Œ∫flagplanematrix = makeflagplane(Œ∫v, Œ∫‚Ä≤v - Œ∫v, T, segments = segments)
Œ∫flagplanecolor = GLMakie.Observable(fill(GLMakie.RGBAf(0.5, 0.5, 0.5, 0.5), segments, segments))
Œ∫flagplaneobservable = buildsurface(lscene, Œ∫flagplanematrix, Œ∫flagplanecolor, transparency = false)

# balls
GLMakie.meshscatter!(lscene, northpole, markersize = 0.05, color = :black)
GLMakie.meshscatter!(lscene, origin, markersize = 0.05, color = :gold)
GLMakie.meshscatter!(lscene, Œ∫head, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene, Œ∫tail, markersize = 0.05, color = colorants[2])
GLMakie.meshscatter!(lscene, Œ∫head1, markersize = 0.05, color = colorants[1])
GLMakie.meshscatter!(lscene, Œ∫tail1, markersize = 0.05, color = colorants[2])


segmentP = GLMakie.@lift([GLMakie.Point3f(0.0, 0.0, 1.0), $Œ∫head, $Œ∫head1])
segmentcolors = GLMakie.Observable(collect(1:segments))
linewidth = 8.0
GLMakie.lines!(lscene, segmentP, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, segments), transparency = false)


animate(frame::Int) = begin
    progress = Float64(frame / frames_number)
    stage = min(totalstages - 1, Int(floor(totalstages * progress))) + 1
    stageprogress = totalstages * (progress - (stage - 1) * 1.0 / totalstages)
    println("Frame: $frame, Stage: $stage, Total Stages: $totalstages, Progress: $stageprogress")
    Œ∏ = progress * 2œÄ
    œï = cos(progress * 2œÄ)
    œà = sin(progress * 2œÄ)
    spintransform = SpinTransformation(Œ∏, œï, œà)
    spherematrix = makesphere(spintransform, T, segments = segments)
    planematrix = makestereographicprojectionplane(spintransform, T = 1.0, segments = segments)
    updatesurface!(spherematrix, sphereobservable)
    updatesurface!(planematrix, planeobservable)
    Œ∫_transformed = ùïç(spintransform * Œ∫)
    Œ∫‚Ä≤_transformed = ùïç(spintransform * Œ∫‚Ä≤)
    Œ∫flagplanematrix = makeflagplane(Œ∫_transformed, ùïç(LinearAlgebra.normalize(vec(Œ∫‚Ä≤_transformed - Œ∫_transformed))), T, segments = segments)
    updatesurface!(Œ∫flagplanematrix, Œ∫flagplaneobservable)
    Œ∫flagplanecolor[] = [GLMakie.RGBAf(convert_hsvtorgb([360.0 * progress; 1.0; 1.0])..., 1.0) for i in 1:segments, j in 1:segments]
    Œ∫head[] = GLMakie.Point3f(project(‚Ñç(LinearAlgebra.normalize(vec(Œ∫_transformed)))))
    Œ∫tail[] = GLMakie.Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤_transformed)))))
    Œ∫tail1[] = GLMakie.Point3f(projectontoplane(Œ∫‚Ä≤_transformed))
    Œ∫head1[] = GLMakie.Point3f(projectontoplane(Œ∫_transformed))
    for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        _Œ∫linepoints = GLMakie.Point3f[]
        _Œ∫linecolors = Int[]
        for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
            Œ∫vector = normalize(‚Ñç(vec(scale1 * Œ∫_transformed + scale2 * ùïç(LinearAlgebra.normalize(vec(Œ∫‚Ä≤_transformed - Œ∫_transformed))))))
            Œ∫point = GLMakie.Point3f(project(Œ∫vector))
            push!(_Œ∫linepoints, Œ∫point)
            push!(_Œ∫linecolors, i + j)
        end
        Œ∫linepoints[i][] = _Œ∫linepoints
        Œ∫linecolors[i][] = _Œ∫linecolors
        GLMakie.notify(Œ∫linepoints[i])
        GLMakie.notify(Œ∫linecolors[i])
    end
    global lookat = ‚Ñù¬≥(Float64.(vec(Œ∫head[]))...)
    updatecamera(lscene, eyeposition, lookat, up)
end


animate(1)


GLMakie.record(fig, joinpath("gallery", "$modelname.mp4"), 1:frames_number) do frame
    animate(frame)
end

# GLMakie.save(joinpath("gallery", "$(modelname)01.png"), fig)