using FileIO
using GLMakie
using LinearAlgebra
using Porta


figuresize = (4096, 2160)
segments = 360
frames_number = 360
modelname = "fig114onetotworelation"

M = Identity(4)
xÃÇ = ‚Ñù¬≥([1.0; 0.0; 0.0])
yÃÇ = ‚Ñù¬≥([0.0; 1.0; 0.0])
zÃÇ = ‚Ñù¬≥([0.0; 0.0; 1.0])
eyeposition1 = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
eyeposition2 = normalize(‚Ñù¬≥(1.0, 1.0, 1.0)) * float(œÄ)
lookat1 = ‚Ñù¬≥(0.0, 0.0, 0.0)
lookat2 = ‚Ñù¬≥(0.0, 0.0, 0.0)
up = normalize(‚Ñù¬≥(0.0, 0.0, 1.0))
totalstages = 1
mask = load("data/basemap_mask.png")

makefigure() = Figure(size = figuresize)
fig = with_theme(makefigure, theme_black())
pl = PointLight(Point3f(0), RGBf(0.0862, 0.0862, 0.0862))
al = AmbientLight(RGBf(0.9, 0.9, 0.9))
lscene1 = LScene(fig[1, 2], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))
lscene2 = LScene(fig[1, 1], show_axis=false, scenekw = (lights = [pl, al], clear=true, backgroundcolor = :white))

T = 1.0
spherematrix1 = makesphere(M, T, compressedprojection = true, segments = segments)
spherematrix2 = makesphere(M, T, compressedprojection = true, segments = segments)
planematrix1 = makestereographicprojectionplane(M, T = T, segments = segments)
planematrix2 = makestereographicprojectionplane(M, T = T, segments = segments)
sphereobservable1 = buildsurface(lscene1, spherematrix1, mask, transparency = true)
sphereobservable2 = buildsurface(lscene2, spherematrix2, mask, transparency = true)
planeobservable1 = buildsurface(lscene1, planematrix1, mask, transparency = true)
planeobservable2 = buildsurface(lscene2, planematrix2, mask, transparency = true)
œµ = 0.1
transformation = SpinTransformation(rand() * œµ, rand() * œµ, rand() * œµ)

generate() = 2rand() - 1 + im * (2rand() - 1)
Œ∫ = SpinVector(generate(), generate(), Int(T))
Œ∂ = Complex(Œ∫)
Œ∫ = SpinVector(Œ∂, Int(T))
Œ∂‚Ä≤ = Œ∂ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫.a[2]^2)
Œ∫‚Ä≤ = SpinVector(Œ∂‚Ä≤, Int(T))

Œ∂‚Ä≥ = Œ∂‚Ä≤ - (1.0 / ‚àö2) * œµ * (1.0 / Œ∫‚Ä≤.a[2]^2)
Œ∫‚Ä≥ = transformation * SpinVector(Œ∂‚Ä≥, Int(T))
Œ∫v = ùïç(Œ∫)
Œ∫‚Ä≤v = ùïç(Œ∫‚Ä≤)
Œ∫‚Ä≥v = ùïç(Œ∫‚Ä≥)

linewidth = 20
Œ∫linepoints1 = []
Œ∫linepoints2 = []
Œ∫linecolors = []
for (i, scale1) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
    _Œ∫linepoints1 = Observable(Point3f[])
    _Œ∫linepoints2 = Observable(Point3f[])
    _Œ∫linecolors = Observable(Int[])
    for (j, scale2) in enumerate(collect(range(0.0, stop = 1.0, length = segments)))
        Œ∫vector = normalize(vec(scale1 * Œ∫v + scale2 * Œ∫‚Ä≤v))
        Œ∫point = Point3f(projectnocompression(‚Ñç(Œ∫vector)))
        push!(_Œ∫linepoints1[], Œ∫point)
        push!(_Œ∫linecolors[], i + j)
        Œ∫vector = normalize(vec(scale1 * Œ∫v + scale2 * Œ∫‚Ä≤v))
        Œ∫point = Point3f(projectnocompression(‚Ñç(Œ∫vector)))
        push!(_Œ∫linepoints2[], Œ∫point)
    end
    push!(Œ∫linepoints1, _Œ∫linepoints1)
    push!(Œ∫linecolors, _Œ∫linecolors)
    push!(Œ∫linepoints2, _Œ∫linepoints2)
    lines!(lscene1, Œ∫linepoints1[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
    lines!(lscene2, Œ∫linepoints2[i], color = Œ∫linecolors[i], linewidth = linewidth, colorrange = (1, 2segments), colormap = :rainbow)
end

arrowsize = Vec3f(0.06, 0.08, 0.1)
linewidth = 0.04
colorants = [:red, :green, :blue, :black]
origin = Observable(Point3f(0.0, 0.0, 0.0))
northpole1 = Observable(Point3f(0.0, 0.0, 1.0))
Œ∫observable1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤observable1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥observable1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))
Œ∫projectionobservable1 = Observable(Point3f(projectontoplane(Œ∫v)))
Œ∫‚Ä≤projectionobservable1 = Observable(Point3f(projectontoplane(Œ∫‚Ä≤v)))
Œ∫‚Ä≥projectionobservable1 = Observable(Point3f(projectontoplane(Œ∫‚Ä≥v)))
northpole2 = Observable(Point3f(0.0, 0.0, 1.0))
Œ∫observable2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤observable2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥observable2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))
Œ∫projectionobservable2 = Observable(Point3f(projectontoplane(Œ∫v)))
Œ∫‚Ä≤projectionobservable2 = Observable(Point3f(projectontoplane(Œ∫‚Ä≤v)))
Œ∫‚Ä≥projectionobservable2 = Observable(Point3f(projectontoplane(Œ∫‚Ä≥v)))
ps1 = @lift([$origin, $Œ∫observable1, $origin, $Œ∫projectionobservable1,
                    $origin, $Œ∫‚Ä≤observable1, $origin, $Œ∫‚Ä≤projectionobservable1,
                    $origin, $Œ∫‚Ä≥observable1, $origin, $Œ∫‚Ä≥projectionobservable1])
ns1 = @lift([$Œ∫observable1, normalize($Œ∫‚Ä≤observable1 - $Œ∫observable1), $Œ∫projectionobservable1, normalize($Œ∫‚Ä≤projectionobservable1 - $Œ∫projectionobservable1),
                    $Œ∫‚Ä≤observable1, normalize($Œ∫‚Ä≥observable1 - $Œ∫‚Ä≤observable1), $Œ∫‚Ä≤projectionobservable1, normalize($Œ∫‚Ä≥projectionobservable1 - $Œ∫‚Ä≤projectionobservable1),
                    $Œ∫‚Ä≥observable1, normalize($Œ∫observable1 - $Œ∫‚Ä≥observable1), $Œ∫‚Ä≥projectionobservable1, normalize($Œ∫projectionobservable1 - $Œ∫‚Ä≥projectionobservable1)])
ps2 = @lift([$origin, $Œ∫observable2, $origin, $Œ∫projectionobservable2,
                    $origin, $Œ∫‚Ä≤observable2, $origin, $Œ∫‚Ä≤projectionobservable2,
                    $origin, $Œ∫‚Ä≥observable2, $origin, $Œ∫‚Ä≥projectionobservable2])
ns2 = @lift([$Œ∫observable2, normalize($Œ∫‚Ä≤observable2 - $Œ∫observable2), $Œ∫projectionobservable2, normalize($Œ∫‚Ä≤projectionobservable2 - $Œ∫projectionobservable2),
                    $Œ∫‚Ä≤observable2, normalize($Œ∫‚Ä≥observable2 - $Œ∫‚Ä≤observable2), $Œ∫‚Ä≤projectionobservable2, normalize($Œ∫‚Ä≥projectionobservable2 - $Œ∫‚Ä≤projectionobservable2),
                    $Œ∫‚Ä≥observable2, normalize($Œ∫observable2 - $Œ∫‚Ä≥observable2), $Œ∫‚Ä≥projectionobservable2, normalize($Œ∫projectionobservable2 - $Œ∫‚Ä≥projectionobservable2)])
arrows!(lscene1,
    ps1, ns1, fxaa = true, # turn on anti-aliasing
    color = [colorants[1], colorants[4], colorants[1], colorants[4], colorants[2], colorants[4], colorants[2], colorants[4], colorants[3], colorants[4], colorants[3], colorants[4]],
    linewidth = linewidth, arrowsize = arrowsize,
    align = :origin
)
arrows!(lscene2,
    ps2, ns2, fxaa = true, # turn on anti-aliasing
    color = [colorants[1], colorants[4], colorants[1], colorants[4], colorants[2], colorants[4], colorants[2], colorants[4], colorants[3], colorants[4], colorants[3], colorants[4]],
    linewidth = linewidth, arrowsize = arrowsize,
    align = :origin
)

rotation1 = gettextrotation(lscene1)
rotation2 = gettextrotation(lscene2)
titles = ["O", "N", "P", "P‚Ä≤", "P‚Ä≥", "P", "P‚Ä≤", "P‚Ä≥"]
text!(lscene1,
    @lift(map(x -> Point3f(isnan(x) ? zÃÇ : x), [$origin, $northpole1, $Œ∫observable1, $Œ∫‚Ä≤observable1, $Œ∫‚Ä≥observable1, $Œ∫projectionobservable1, $Œ∫‚Ä≤projectionobservable1, $Œ∫‚Ä≥projectionobservable1])),
    text = titles,
    color = [:gold, :black, colorants[1], colorants[2], colorants[3], colorants[1], colorants[2], colorants[3]],
    rotation = rotation1,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)
text!(lscene2,
    @lift(map(x -> Point3f(isnan(x) ? zÃÇ : x), [$origin, $northpole2, $Œ∫observable2, $Œ∫‚Ä≤observable2, $Œ∫‚Ä≥observable2, $Œ∫projectionobservable2, $Œ∫‚Ä≤projectionobservable2, $Œ∫‚Ä≥projectionobservable2])),
    text = titles,
    color = [:gold, :black, colorants[1], colorants[2], colorants[3], colorants[1], colorants[2], colorants[3]],
    rotation = rotation2,
    align = (:left, :baseline),
    fontsize = 0.25,
    markerspace = :data
)

Œ∫flagplanecolor = Observable(fill(RGBAf(0.5, 0.5, 0.5, 0.5), segments, segments))
Œ∫flagplanematrix1 = makeflagplane(Œ∫v, Œ∫‚Ä≤v - Œ∫v, T, compressedprojection = true, segments = segments)
Œ∫flagplanematrix2 = makeflagplane(Œ∫v, Œ∫‚Ä≤v - Œ∫v, T, compressedprojection = true, segments = segments)
Œ∫flagplaneobservable1 = buildsurface(lscene1, Œ∫flagplanematrix1, Œ∫flagplanecolor, transparency = true)
Œ∫flagplaneobservable2 = buildsurface(lscene2, Œ∫flagplanematrix2, Œ∫flagplanecolor, transparency = true)

Œ∫sectional1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤sectional1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥sectional1 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))
Œ∫sectional2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫v))))))
Œ∫‚Ä≤sectional2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≤v))))))
Œ∫‚Ä≥sectional2 = Observable(Point3f(projectnocompression(normalize(‚Ñç(vec(Œ∫‚Ä≥v))))))

# balls
meshscatter!(lscene1, northpole1, markersize = 0.05, color = :black)
meshscatter!(lscene1, origin, markersize = 0.05, color = :gold)
meshscatter!(lscene1, Œ∫observable1, markersize = 0.05, color = colorants[1])
meshscatter!(lscene1, Œ∫‚Ä≤observable1, markersize = 0.05, color = colorants[2])
meshscatter!(lscene1, Œ∫‚Ä≥observable1, markersize = 0.05, color = colorants[3])
meshscatter!(lscene1, Œ∫projectionobservable1, markersize = 0.05, color = colorants[1])
meshscatter!(lscene1, Œ∫‚Ä≤projectionobservable1, markersize = 0.05, color = colorants[2])
meshscatter!(lscene1, Œ∫‚Ä≥projectionobservable1, markersize = 0.05, color = colorants[3])
meshscatter!(lscene1, Œ∫sectional1, markersize = 0.05, color = colorants[1])
meshscatter!(lscene1, Œ∫‚Ä≤sectional1, markersize = 0.05, color = colorants[2])
meshscatter!(lscene1, Œ∫‚Ä≥sectional1, markersize = 0.05, color = colorants[3])
meshscatter!(lscene2, northpole2, markersize = 0.05, color = :black)
meshscatter!(lscene2, origin, markersize = 0.05, color = :gold)
meshscatter!(lscene2, Œ∫observable2, markersize = 0.05, color = colorants[1])
meshscatter!(lscene2, Œ∫‚Ä≤observable2, markersize = 0.05, color = colorants[2])
meshscatter!(lscene2, Œ∫‚Ä≥observable2, markersize = 0.05, color = colorants[3])
meshscatter!(lscene2, Œ∫projectionobservable2, markersize = 0.05, color = colorants[1])
meshscatter!(lscene2, Œ∫‚Ä≤projectionobservable2, markersize = 0.05, color = colorants[2])
meshscatter!(lscene2, Œ∫‚Ä≥projectionobservable2, markersize = 0.05, color = colorants[3])
meshscatter!(lscene2, Œ∫sectional2, markersize = 0.05, color = colorants[1])
meshscatter!(lscene2, Œ∫‚Ä≤sectional2, markersize = 0.05, color = colorants[2])
meshscatter!(lscene2, Œ∫‚Ä≥sectional2, markersize = 0.05, color = colorants[3])

segmentP1 = @lift([$northpole1, $Œ∫observable1, $Œ∫projectionobservable1])
segmentP‚Ä≤1 = @lift([$northpole1, $Œ∫‚Ä≤observable1, $Œ∫‚Ä≤projectionobservable1])
segmentP‚Ä≥1 = @lift([$northpole1, $Œ∫‚Ä≥observable1, $Œ∫‚Ä≥projectionobservable1])
segmentP2 = @lift([$northpole2, $Œ∫observable2, $Œ∫projectionobservable2])
segmentP‚Ä≤2 = @lift([$northpole2, $Œ∫‚Ä≤observable2, $Œ∫‚Ä≤projectionobservable2])
segmentP‚Ä≥2 = @lift([$northpole2, $Œ∫‚Ä≥observable2, $Œ∫‚Ä≥projectionobservable2])
segmentcolors = Observable(collect(1:3))
linewidth = 8.0
lines!(lscene1, segmentP1, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)
lines!(lscene1, segmentP‚Ä≤1, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)
lines!(lscene1, segmentP‚Ä≥1, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)
lines!(lscene2, segmentP2, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)
lines!(lscene2, segmentP‚Ä≤2, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)
lines!(lscene2, segmentP‚Ä≥2, linewidth = 2linewidth, color = segmentcolors, colormap = :plasma, colorrange = (1, 3), transparency = false)


animate(frame::Int) = begin
    progress = Float64(frame / frames_number)
    println("Frame: $frame, Progress: $progress")
    œà = progress * 2œÄ
    M = exp(K(3) * œà)
    spintransform = SpinTransformation(0.0, 0.0, 2œà)
    Œ∫transformed1 = ùïç( vec(M * ‚Ñç(vec(ùïç( SpinVector(Complex(Œ∫) * cos(œà), Œ∫.timesign))))))
    Œ∫‚Ä≤transformed1 = ùïç( vec(M * ‚Ñç(vec(ùïç( SpinVector(Complex(Œ∫‚Ä≤) * cos(œà), Œ∫‚Ä≤.timesign))))))
    Œ∫‚Ä≥transformed1 = ùïç( vec(M * ‚Ñç(vec(ùïç( SpinVector(Complex(Œ∫‚Ä≥) * cos(œà), Œ∫‚Ä≥.timesign))))))
    Œ∫transformed2 = ùïç(spintransform * Œ∫)
    Œ∫‚Ä≤transformed2 = ùïç(spintransform * Œ∫‚Ä≤)
    Œ∫‚Ä≥transformed2 = ùïç(spintransform * Œ∫‚Ä≥)
    northpole1[] = Point3f(project(M * normalize(‚Ñç(T, 0.0, 0.0, 1.0))))
    spherematrix1 = makesphere(M, T, compressedprojection = true, segments = segments)
    spherematrix2 = makesphere(spintransform, T, segments = segments)
    planematrix1 = makestereographicprojectionplane(M, T = T, segments = segments)
    planematrix2 = makestereographicprojectionplane(spintransform, T = 1.0, segments = segments)
    updatesurface!(planematrix1, planeobservable1)
    updatesurface!(planematrix2, planeobservable2)
    updatesurface!(spherematrix1, sphereobservable1)
    updatesurface!(spherematrix2, sphereobservable2)
    Œ∫flagplanematrix1 = makeflagplane(Œ∫transformed1, ùïç( normalize(vec(Œ∫‚Ä≤transformed1 - Œ∫transformed1))), T, compressedprojection = true, segments = segments)
    Œ∫flagplanematrix2 = makeflagplane(Œ∫transformed2, ùïç( normalize(vec(Œ∫‚Ä≤transformed2 - Œ∫transformed2))), T, compressedprojection = true, segments = segments)
    updatesurface!(Œ∫flagplanematrix1, Œ∫flagplaneobservable1)
    updatesurface!(Œ∫flagplanematrix2, Œ∫flagplaneobservable2)
    Œ∫flagplanecolor[] = [RGBAf(convert_hsvtorgb([359.0 * progress; 1.0; 1.0])..., 0.8) for i in 1:segments, j in 1:segments]
    Œ∫observable1[] = Point3f(project(normalize(‚Ñç(vec(Œ∫transformed1)))))
    Œ∫‚Ä≤observable1[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤transformed1)))))
    Œ∫‚Ä≥observable1[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥transformed1)))))
    Œ∫projectionobservable1[] = Point3f(projectontoplane(Œ∫transformed1))
    Œ∫‚Ä≤projectionobservable1[] = Point3f(projectontoplane(Œ∫‚Ä≤transformed1))
    Œ∫‚Ä≥projectionobservable1[] = Point3f(projectontoplane(Œ∫‚Ä≥transformed1))
    Œ∫observable2[] = Point3f(project(normalize(‚Ñç(vec(Œ∫transformed2)))))
    Œ∫‚Ä≤observable2[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≤transformed2)))))
    Œ∫‚Ä≥observable2[] = Point3f(project(normalize(‚Ñç(vec(Œ∫‚Ä≥transformed2)))))
    Œ∫projectionobservable2[] = Point3f(projectontoplane(Œ∫transformed2))
    Œ∫‚Ä≤projectionobservable2[] = Point3f(projectontoplane(Œ∫‚Ä≤transformed2))
    Œ∫‚Ä≥projectionobservable2[] = Point3f(projectontoplane(Œ∫‚Ä≥transformed2))
    Œ∫sectional1[] = (Œ∫observable1[] + Œ∫projectionobservable1[]) * 0.5
    Œ∫‚Ä≤sectional1[] = (Œ∫‚Ä≤observable1[] + Œ∫‚Ä≤projectionobservable1[]) * 0.5
    Œ∫‚Ä≥sectional1[] = (Œ∫‚Ä≥observable1[] + Œ∫‚Ä≥projectionobservable1[]) * 0.5
    Œ∫sectional2[] = (Œ∫observable2[] + Œ∫projectionobservable2[]) * 0.5
    Œ∫‚Ä≤sectional2[] = (Œ∫‚Ä≤observable2[] + Œ∫‚Ä≤projectionobservable2[]) * 0.5
    Œ∫‚Ä≥sectional2[] = (Œ∫‚Ä≥observable2[] + Œ∫‚Ä≥projectionobservable2[]) * 0.5
    for (i, scale1) in enumerate(collect(range(0.0, stop = T, length = segments)))
        _Œ∫linepoints1 = Point3f[]
        _Œ∫linepoints2 = Point3f[]
        _Œ∫linecolors = Int[]
        for (j, scale2) in enumerate(collect(range(0.0, stop = T, length = segments)))
            Œ∫vector = normalize(‚Ñç(vec(scale1 * Œ∫transformed1 + scale2 * ùïç( normalize(vec(Œ∫‚Ä≤transformed1 - Œ∫transformed1))))))
            Œ∫point = Point3f(project(Œ∫vector))
            push!(_Œ∫linepoints1, Œ∫point)
            Œ∫vector = normalize(‚Ñç(vec(scale1 * Œ∫transformed2 + scale2 * ùïç( normalize(vec(Œ∫‚Ä≤transformed2 - Œ∫transformed2))))))
            Œ∫point = Point3f(project(Œ∫vector))
            push!(_Œ∫linepoints2, Œ∫point)
            push!(_Œ∫linecolors, i + j)
        end
        Œ∫linepoints1[i][] = _Œ∫linepoints1
        Œ∫linepoints2[i][] = _Œ∫linepoints2
        Œ∫linecolors[i][] = _Œ∫linecolors
    end
    global lookat1 = (1.0 / 3.0) * ‚Ñù¬≥(Œ∫sectional1[] + Œ∫‚Ä≤sectional1[] + Œ∫‚Ä≥sectional1[])
    global lookat2 = (1.0 / 3.0) * ‚Ñù¬≥(Œ∫sectional2[] + Œ∫‚Ä≤sectional2[] + Œ∫‚Ä≥sectional2[])
    global eyeposition = (xÃÇ + yÃÇ + zÃÇ) * float(œÄ)
    updatecamera!(lscene1, eyeposition, lookat1, up)
    updatecamera!(lscene2, eyeposition, lookat2, up)
end


animate(1)

record(fig, joinpath("gallery", "$modelname.mp4"), 1:frames_number) do frame
    animate(frame)
end