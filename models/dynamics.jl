using LinearAlgebra
using Serialization
using ModelingToolkit, DifferentialEquations, Latexify
using Porta


Œª‚ÇÄ = Œª‚ÇÅ
r‚ÇÄ = r‚ÇÅ

r‚ÇÅ = 0.8 # experiments: 1-6
Œª‚ÇÅ = 1 + 0.2 * im # experiment 1
Œª‚ÇÇ = im # experiment 2
Œª‚ÇÉ = 2 + im # experiment 3
Œª‚ÇÑ = 0 # experiment 4
Œª‚ÇÖ = 1 # experiment 5
Œª‚ÇÜ = -im # experiment 6

r‚Çá = 0.5 # experiment 7
Œª‚Çá = -im # experiment 7

r‚Çà = 0.8 # experiment 8
Œª‚Çà = 2 - im # experiment 8

# r‚ÇÄ = 3.0 # radius of lambda path circle
# Œª‚ÇÄ = Œª‚Çà # center of lambda path circle
œï‚ÇÄ = 0.0

operator = imag(Œª‚ÇÄ) ‚â• 0 ? "+" : "-"
version = "r‚ÇÄ=$(r‚ÇÄ)_Œª‚ÇÄ=$(float(real(Œª‚ÇÄ)))_$(operator)_ùëñ$(abs(float(imag(Œª‚ÇÄ))))"
modelname = "segment26_gamma3_$version"
L = 10.0 # max x range
L‚Ä≤ = -L


getŒª(s) = Œª‚ÇÄ + r‚ÇÄ * exp(im * (s + œï‚ÇÄ))
getŒª‚Çõ(s, _r) = im * _r * exp(im * (s + œï‚ÇÄ))
getŒº(s) = ‚àö(getŒª(s) + 1)
getf(x) = (3 / 2) * sech(x / 2)^2
getA(x, s) = [0 1; getŒª(s) + 1 - 2getf(x) 0]
sqrt·µ£(r::Real, i::Real) = real(‚àö(r + im * i))
sqrt·µ¢(r::Real, i::Real) = imag(‚àö(r + im * i))
sqrt·µ£(r::Num, i::Num) = real(‚àö(r + im * i))
sqrt·µ¢(r::Num, i::Num) = imag(‚àö(r + im * i))
@register_symbolic sqrt·µ£(r, i)
@register_symbolic sqrt·µ¢(r, i)


"""
    getŒ≥‚ÇÅ(L, L‚Ä≤)

Get path Œ≥‚ÇÅ by integating a connection 1-form around a loop in Œª-space with the given interval [`L`,`L‚Ä≤`].
Rupert Way (2008)
"""
function getŒ≥‚ÇÅ(L::Float64, L‚Ä≤::Float64)
    s‚ÇÄ = L
    u‚ÇÄ = Quaternion([1.0; -‚àö(getŒª(s‚ÇÄ) + 1)])
    u‚Çó‚ÇÄ = Quaternion([0.0; -1 / 2(‚àö(getŒª(s‚ÇÄ) + 1))])
    v‚ÇÄ = normalize(u‚ÇÄ)
    w‚ÇÄ = œÄmap(v‚ÇÄ)
    Œª‚Çõ‚ÇÄ = getŒª‚Çõ(s‚ÇÄ, r‚ÇÄ)
    Œ∏‚ÇÄ = 0.0
    m‚ÇÄ = norm(u‚ÇÄ)
    # TDOO: define Œª‚Çõ in terms of the D differential operator
    # Define our state variables: state(t) = initial condition
    @variables t
    @variables Œª·µ£(t)=real(getŒª(L))
    @variables Œª·µ¢(t)=imag(getŒª(L))
    @variables Œª‚Çõ·µ£(t)=real(Œª‚Çõ‚ÇÄ)
    @variables Œª‚Çõ·µ¢(t)=imag(Œª‚Çõ‚ÇÄ)
    @variables u(t)[1:4]=vec(u‚ÇÄ)
    @variables u‚Çó(t)[1:4]=vec(u‚Çó‚ÇÄ)
    @variables v(t)[1:4]=vec(v‚ÇÄ)
    @variables w(t)[1:3]=w‚ÇÄ
    @variables Œ∏(t)=Œ∏‚ÇÄ
    @variables m(t)=m‚ÇÄ
    # Define our parameters
    @parameters r::Float64=r‚ÇÄ œï::Float64=œï‚ÇÄ
    # Define our differential: takes the derivative with respect to `t`
    D = Differential(t)
    # Define the differential equations
    eqs = [Œª·µ£ ~ real(getŒª(t))
           Œª·µ¢ ~ imag(getŒª(t))
           Œª‚Çõ·µ£ ~ real(getŒª‚Çõ(t, r))
           Œª‚Çõ·µ¢ ~ imag(getŒª‚Çõ(t, r))
           u[1] ~ 1.0
           u[2] ~ -sqrt·µ£(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))
           u[3] ~ 0.0
           u[4] ~ -sqrt·µ¢(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))
           u‚Çó[1] ~ 0.0
           u‚Çó[2] ~ real(-1 / 2(sqrt·µ£(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1)) + im * sqrt·µ¢(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))))
           u‚Çó[3] ~ 0.0
           u‚Çó[4] ~ imag(-1 / 2(sqrt·µ£(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1)) + im * sqrt·µ¢(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))))
           m ~ sqrt·µ£(sum(abs.([u[1] + u[3] * im; u[2] + u[4] * im]).^2), 0.0)
           v ~ u ./ m
           w[3] ~ real(conj(v[1] + v[3] * im) * (v[2] + v[4] * im) + (v[1] + v[3] * im) * conj(v[2]) + v[4] * im)
           w[2] ~ real(im * (conj(v[1] + v[3] * im) * (v[2] + v[4] * im) - (v[1] + v[3] * im) * conj(v[2] + v[4] * im)))
           w[1] ~ real(abs(v[1] + v[3] * im)^2 - abs(v[2] + v[4] * im)^2)
           D(Œ∏) ~ imag((u' * u‚Çó) * (Œª‚Çõ·µ£ + Œª‚Çõ·µ¢ * im)) / (u' * u)]
    latex = latexify(eqs)
    println("Œ≥‚ÇÅ")
    println(latex)
    # Bring these pieces together into an ODESystem with independent variable t
    @named sys = ODESystem(eqs, t)
    # Symbolically Simplify the System
    simpsys = structural_simplify(sys)
    # Convert from a symbolic to a numerical problem to simulate
    tspan = (L, L‚Ä≤)
    prob = ODEProblem(simpsys, [], tspan)
    # Solve the ODE
    sol = solve(prob)
    samples = length(sol[v])
    Œ≥‚ÇÅ = Vector{Quaternion}(undef, samples)
    phases = Vector{Float64}(undef, samples)
    path_Œª = Vector{Vector{Float64}}(undef, samples)
    s = Vector{Float64}(undef, samples)
    path_s2 = Vector{Vector{Float64}}(undef, samples)
    for i in 1:samples
        Œ≥‚ÇÅ[i] = Quaternion(sol[v][i])
        path_Œª[i] = convert_to_cartesian(sol[Œª·µ£][i] + im * sol[Œª·µ¢][i])
        phases[i] = sol[Œ∏][i]
        s[i] = sol[t][i]
        path_s2[i] = sol[w][i]
    end
    Œ≥‚ÇÅ, phases, path_Œª, path_s2, s, latex
end


"""
    getŒ≥‚ÇÇ(L, L‚Ä≤, s‚ÇÄ)

Get path Œ≥‚ÇÇ by integating a connection 1-form in the x direction with the given bounds [`L`,`L‚Ä≤`] and a fixed value for Œª `s‚ÇÄ`.
Rupert Way (2008)
"""
function getŒ≥‚ÇÇ(L::Float64, L‚Ä≤::Float64, s‚ÇÄ::Float64)
    Œº‚ÇÄ = getŒº(s‚ÇÄ)
    u‚ÇÄ = Quaternion([1.0; -Œº‚ÇÄ])
    Œ∏‚ÇÄ = 0.0
    v‚ÇÄ = normalize(u‚ÇÄ)
    w‚ÇÄ = œÄmap(v‚ÇÄ)
    m‚ÇÄ = norm(u‚ÇÄ)
    f‚ÇÄ = getf(s‚ÇÄ)
    Œª·µ£‚ÇÄ = real(getŒª(s‚ÇÄ))
    Œª·µ¢‚ÇÄ = imag(getŒª(s‚ÇÄ))
    # Define our state variables: state(t) = initial condition
    @variables t
    @variables f(t)=f‚ÇÄ
    @variables Œº·µ£(t)=real(Œº‚ÇÄ)
    @variables Œº·µ¢(t)=imag(Œº‚ÇÄ)
    @variables u(t)[1:4]=vec(u‚ÇÄ)
    @variables v(t)[1:4]=vec(v‚ÇÄ)
    @variables w(t)[1:3]=w‚ÇÄ
    @variables Œ∏(t)=Œ∏‚ÇÄ
    @variables m(t)=m‚ÇÄ
    # Define our parameters
    @parameters Œª·µ£::Float64=Œª·µ£‚ÇÄ Œª·µ¢::Float64=Œª·µ¢‚ÇÄ
    # Define our differential: takes the derivative with respect to `t`
    D = Differential(t)
    # Define the differential equations
    eqs = [Œº·µ£ ~ sqrt·µ£(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))
           Œº·µ¢ ~ sqrt·µ¢(real(Œª·µ£ + Œª·µ¢ * im + 1), imag(Œª·µ£ + Œª·µ¢ * im + 1))
           f ~ getf(t)
           D(u[1]) ~ real( ([0 1; (Œª·µ£ + Œª·µ¢ * im) + 1 - 2f 0] + [Œº·µ£ + Œº·µ¢ * im 0; 0 Œº·µ£ + Œº·µ¢ * im]) * [u[1] + u[3] * im; u[2] + u[4] * im] )[1]
           D(u[2]) ~ real( ([0 1; (Œª·µ£ + Œª·µ¢ * im) + 1 - 2f 0] + [Œº·µ£ + Œº·µ¢ * im 0; 0 Œº·µ£ + Œº·µ¢ * im]) * [u[1] + u[3] * im; u[2] + u[4] * im] )[2]
           D(u[3]) ~ imag( ([0 1; (Œª·µ£ + Œª·µ¢ * im) + 1 - 2f 0] + [Œº·µ£ + Œº·µ¢ * im 0; 0 Œº·µ£ + Œº·µ¢ * im]) * [u[1] + u[3] * im; u[2] + u[4] * im] )[1]
           D(u[4]) ~ imag( ([0 1; (Œª·µ£ + Œª·µ¢ * im) + 1 - 2f 0] + [Œº·µ£ + Œº·µ¢ * im 0; 0 Œº·µ£ + Œº·µ¢ * im]) * [u[1] + u[3] * im; u[2] + u[4] * im] )[2]
           D(Œ∏) ~ imag(([u[1] + u[3] * im u[2] + u[4] * im] * ([0 1; (Œª·µ£ + Œª·µ¢ * im) + 1 - 2f 0] * [u[1] + u[3] * im; u[2] + u[4] * im]))[1]) / (u' * u)
           m ~ sqrt·µ£(sum(abs.([u[1] + u[3] * im; u[2] + u[4] * im]).^2), 0)
           v ~ u ./ m
           w[3] ~ real(conj(v[1] + v[3] * im) * (v[2] + v[4] * im) + (v[1] + v[3] * im) * conj(v[2]) + v[4] * im)
           w[2] ~ real(im * (conj(v[1] + v[3] * im) * (v[2] + v[4] * im) - (v[1] + v[3] * im) * conj(v[2] + v[4] * im)))
           w[1] ~ real(abs(v[1] + v[3] * im)^2 - abs(v[2] + v[4] * im)^2)]
    latex = latexify(eqs)
    # Bring these pieces together into an ODESystem with independent variable t
    @named sys = ODESystem(eqs, t)
    # Symbolically Simplify the System
    simpsys = structural_simplify(sys)
    # Convert from a symbolic to a numerical problem to simulate
    tspan = (L, L‚Ä≤)
    prob = ODEProblem(simpsys, [], tspan)
    # Solve the ODE
    sol = solve(prob)
    samples = length(sol[v])
    Œ≥‚ÇÇ = Vector{Quaternion}(undef, samples)
    u‚ÇÇ = Vector{Quaternion}(undef, samples)
    phases = Vector{Float64}(undef, samples)
    s = Vector{Float64}(undef, samples)
    path_s2 = Vector{Vector{Float64}}(undef, samples)
    for i in 1:samples
        Œ≥‚ÇÇ[i] = Quaternion(sol[v][i])
        u‚ÇÇ[i] = Quaternion(sol[u][i])
        phases[i] = sol[Œ∏][i]
        s[i] = sol[t][i]
        path_s2[i] = sol[w][i]
    end
    Œª = convert_to_cartesian(Œª·µ£ + im * Œª·µ¢)
    Œ≥‚ÇÇ, u‚ÇÇ, phases, Œª, path_s2, s, latex
end


@register_symbolic get_u(L, L‚Ä≤, s)::Vector{Float64}
get_u(L::Float64, L‚Ä≤::Float64, s::Float64) = vec(getŒ≥‚ÇÇ(L, L‚Ä≤, s)[2][end])


"""
    getŒ≥‚ÇÉ(L, L‚Ä≤)

Get path Œ≥‚ÇÉ with the given integration interval [`L`,`L‚Ä≤`] along paths of type Œ≥‚ÇÇ.
Rupert Way (2008)
"""
function getŒ≥‚ÇÉ(L::Float64, L‚Ä≤::Float64)
    u‚ÇÄ = get_u(L, L‚Ä≤, L)
    v‚ÇÄ = vec(normalize(u‚ÇÄ))
    w‚ÇÄ = œÄmap(Quaternion(v‚ÇÄ))
    m‚ÇÄ = norm(u‚ÇÄ)
    # Define our parameters
    @parameters K‚ÇÉ[1:4,1:4]=K(3) Œ¥=(2œÄ / 1000)
    # Define our state variables: state(t) = initial condition
    @variables t
    @variables u(t)[1:4]=u‚ÇÄ
    @variables u‚Çõ(t)[1:4]=u‚ÇÄ
    @variables v(t)[1:4]=v‚ÇÄ
    @variables w(t)[1:3]=w‚ÇÄ
    @variables m(t)=m‚ÇÄ
    @variables Œ∏(t)=0

    # Define our differential: takes the derivative with respect to `t`
    D = Differential(t)

    # Define the differential equations
    eqs = [u .~ get_u(L, L‚Ä≤, t)[1:4]
           u‚Çõ .~ (get_u(L, L‚Ä≤, t + Œ¥)[1:4] - get_u(L, L‚Ä≤, t - Œ¥)[1:4]) ./ 2Œ¥
           D(Œ∏) ~ imag([u[1] + u[3] * im; u[2] + u[4] * im]' * [u‚Çõ[1] + u‚Çõ[3] * im; u‚Çõ[2] + u‚Çõ[4] * im]) / (u' * u)
           m ~ sqrt·µ£(sum(abs.([u[1] + u[3] * im; u[2] + u[4] * im]).^2), 0)
           v ~ u ./ m
           w[3] ~ real(conj(v[1] + v[3] * im) * (v[2] + v[4] * im) + (v[1] + v[3] * im) * conj(v[2]) + v[4] * im)
           w[2] ~ real(im * (conj(v[1] + v[3] * im) * (v[2] + v[4] * im) - (v[1] + v[3] * im) * conj(v[2] + v[4] * im)))
           w[1] ~ real(abs(v[1] + v[3] * im)^2 - abs(v[2] + v[4] * im)^2)]

    latex = latexify(eqs)
    println("Œ≥‚ÇÉ")
    println(latex)

    # Bring these pieces together into an ODESystem with independent variable t
    @named sys = ODESystem(eqs, t)

    # Symbolically Simplify the System
    simpsys = structural_simplify(sys)

   # latexify(simpsys)

    # Convert from a symbolic to a numerical problem to simulate
    tspan = (0, 2œÄ)
    prob = ODEProblem(simpsys, [], tspan)

    # Solve the ODE
    sol = solve(prob)
    samples = length(sol[v])
    Œ≥‚ÇÉ = Vector{Quaternion}(undef, samples)
    phases = Vector{Float64}(undef, samples)
    s = Vector{Float64}(undef, samples)
    s2_path = Vector{Vector{Float64}}(undef, samples)
    for i in 1:samples
        Œ≥‚ÇÉ[i] = Quaternion(sol[v][i])
        phases[i] = sol[Œ∏][i]
        s[i] = sol[t][i]
        s2_path = sol[w][i]
    end
    Œ≥‚ÇÉ, phases, s2_path, s, latex
end


Œ≥‚ÇÅ, Œ∏‚ÇÅ, Œª‚ÇÅ, w‚ÇÅ, t‚ÇÅ, latex1 = getŒ≥‚ÇÅ(0.0, 2œÄ)
serialize("gamma1_$version", [Œ≥‚ÇÅ, Œ∏‚ÇÅ, Œª‚ÇÅ, w‚ÇÅ, t‚ÇÅ, latex1])
steps_number = length(t‚ÇÅ)
Œ≥‚ÇÇ = Vector{Vector{Quaternion}}(undef, steps_number)
Œ∏‚ÇÇ = Vector{Vector{Float64}}(undef, steps_number)
Œª_array = []
for i in 1:steps_number
    _Œ≥, _u, _Œ∏, _Œª, _w, _t, _latex2 = getŒ≥‚ÇÇ(L, L‚Ä≤, t‚ÇÅ[i])
    push!(Œª_array, _Œª)
    Œ≥‚ÇÇ[i] = _Œ≥
    Œ∏‚ÇÇ[i] = _Œ∏
end
serialize("gamma2_$version", [Œ≥‚ÇÇ, Œ∏‚ÇÇ, Œª_array])
Œ≥‚ÇÉ, Œ∏‚ÇÉ, s2_path‚ÇÉ, t‚ÇÉ, latex3 = getŒ≥‚ÇÉ(L, L‚Ä≤)
serialize("gamma3_$version", [Œ≥‚ÇÉ, Œ∏‚ÇÉ, s2_path‚ÇÉ, t‚ÇÉ, latex3])